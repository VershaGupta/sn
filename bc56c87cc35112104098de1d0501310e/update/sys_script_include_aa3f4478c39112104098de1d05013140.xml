<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_egnyte_prote.EgnyteSaveIssues</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Process and save the issue updated retrieved from Egnyte Protect</description>
        <mobile_callable>false</mobile_callable>
        <name>EgnyteSaveIssues</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var EgnyteSaveIssues = Class.create();
EgnyteSaveIssues.prototype = {
    initialize: function() {
		this.issuesTableGr = new GlideRecord('x_snc_egnyte_prote_egnyte_issues_mapping');
		this.issuesList = [];
    },

	/**
	 * Function used to start the process of saving the issues in mapping table
	 */
	process: function(issues) {
		EgnyteLogger.info('Saving issues in mapping table');

		if (typeof issues == 'object' && issues.length) {
			this.issuesList = issues;
			try {
				this.saveIssuesInMappingTable();
			} catch (e) {
				EgnyteLogger.info('Exception occurred while saving issues in mapping table.');
				EgnyteLogger.debug('Exception: ' + e.getMessage());
			}
		}
	},

	/**
	 * Function used to insert the issues in mapping table
	 */
	saveIssuesInMappingTable: function() {
		for (var i = 0, len = this.issuesList.length; i <  len; i++) {
			var issue = this.issuesList[i];
			this.issuesTableGr.initialize();
			this.issuesTableGr.setValue('issue_id', issue.id);
			this.issuesTableGr.setValue('status', issue.status);
			this.issuesTableGr.setValue('issue_type', issue.type);
			this.issuesTableGr.setValue('source_label', issue.sourceLabel);
			this.issuesTableGr.setValue('severity', issue.severity);
			this.issuesTableGr.setValue('source', issue.source);
			this.issuesTableGr.setValue('updated', this.getDateTimeValue(issue.updated));
			this.issuesTableGr.setValue('detected', this.getDateTimeValue(issue.detected));
			this.issuesTableGr.setValue('item_display_name', issue.item.displayName);
			this.issuesTableGr.setValue('json_data', JSON.stringify(issue));
			this.issuesTableGr.insert();
		}
	},

	/**
	 * Function used to get formatted date time from epoch value
	 *
	 * @param {Number} epoch - epoch value
	 * @return {String} formatted date time
	 */
	getDateTimeValue: function(epoch) {
		var gdt = new GlideDateTime();
		gdt.subtract(gdt.getNumericValue()); // Resets the date to 0 so that we can add the milliseconds to the date
		gdt.add(epoch);
		return gdt.getValue();
	},

    type: 'EgnyteSaveIssues'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-14 12:59:34</sys_created_on>
        <sys_id>aa3f4478c39112104098de1d05013140</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>EgnyteSaveIssues</sys_name>
        <sys_package display_value="Egnyte Protect " source="x_snc_egnyte_prote">bc56c87cc35112104098de1d0501310e</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Egnyte Protect ">bc56c87cc35112104098de1d0501310e</sys_scope>
        <sys_update_name>sys_script_include_aa3f4478c39112104098de1d05013140</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-21 11:12:20</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>aa3f4478c39112104098de1d05013140</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-10-14 12:59:33</sys_created_on>
        <sys_id>ea4f40b8c39112104098de1d05013169</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-10-14 12:59:33</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
